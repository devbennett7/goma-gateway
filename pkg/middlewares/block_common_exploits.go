/*
 * Copyright 2024 Jonas Kaninda
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

package middlewares

import (
	"bytes"
	"encoding/xml"
	"fmt"
	"github.com/jkaninda/goma-gateway/pkg/logger"
	"io"
	"net/http"
	"net/url"
	"regexp"
	"strings"
)

// BlockExploitsMiddleware Middleware to block common exploits
func BlockExploitsMiddleware(next http.Handler) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		contentType := r.Header.Get("Content-Type")
		// Get request query
		query := r.URL.RawQuery
		if query != "" {
			query = "?" + query
		}
		// URL decode the query parameter
		query, err := url.QueryUnescape(query)
		if err != nil {
			logger.Error("Error decoding query parameter: %s", err.Error())
		}
		// Patterns to detect SQL injection attempts
		sqlInjectionPattern := regexp.MustCompile(sqlPatterns)

		// Pattern to detect path traversal attempts
		pathTraversalPattern := regexp.MustCompile(traversalPatterns)
		_pathTraversalPattern := regexp.MustCompile(_traversalPatterns)

		// Pattern to detect simple XSS attempts
		xssPattern := regexp.MustCompile(xssPatterns)

		// Check query strings
		if sqlInjectionPattern.MatchString(query) ||
			pathTraversalPattern.MatchString(r.URL.Path) || _pathTraversalPattern.MatchString(query) ||
			xssPattern.MatchString(query) {
			logger.Error("Forbidden - Potential exploit detected: method=%s url=%s client_ip=%s status=%d user_agent=%s", r.Method, fmt.Sprintf("%s%s", r.URL.Path, query), getRealIP(r), http.StatusForbidden, r.UserAgent())
			RespondWithError(w, r, http.StatusForbidden, fmt.Sprintf("%d %s", http.StatusForbidden, http.StatusText(http.StatusForbidden)), nil, contentType)
			return

		}
		// Check form data (for POST requests)
		if r.Method == http.MethodPost || r.Method == http.MethodPut {
			if err := r.ParseForm(); err == nil {
				for _, values := range r.Form {
					for _, value := range values {
						if sqlInjectionPattern.MatchString(value) || xssPattern.MatchString(value) {
							logger.Error("Forbidden - Potential exploit detected: method=%s url=%s client_ip=%s status=%d user_agent=%s", r.Method, fmt.Sprintf("%s%s", r.URL.Path, query), getRealIP(r), http.StatusForbidden, r.UserAgent())
							RespondWithError(w, r, http.StatusForbidden, fmt.Sprintf("%d %s", http.StatusForbidden, http.StatusText(http.StatusForbidden)), nil, contentType)
							return
						}
					}
				}
			}
			//
			XXEProtection(w, r)

		}

		// Pass to the next handler if no exploit patterns were detected
		next.ServeHTTP(w, r)
	})
}

// XXEProtection protects against XXE attacks
func XXEProtection(w http.ResponseWriter, r *http.Request) {
	// Check if the request contains XML content
	if strings.Contains(r.Header.Get("Content-Type"), "application/xml") ||
		strings.Contains(r.Header.Get("Content-Type"), "text/xml") {
		// Read the request body
		body, err := io.ReadAll(r.Body)
		if err != nil {
			RespondWithError(w, r, http.StatusBadRequest, "Failed to read request body", nil, "")
			return
		}
		defer func(Body io.ReadCloser) {
			err := Body.Close()
			if err != nil {
				logger.Error("Error closing request body: %s", err.Error())
				return
			}
		}(r.Body)

		// Decode the XML while disabling external entities
		decoder := xml.NewDecoder(bytes.NewReader(body))
		decoder.Strict = false
		decoder.Entity = xml.HTMLEntity // Disable external entities

		var parsed interface{}
		if err := decoder.Decode(&parsed); err != nil {
			RespondWithError(w, r, http.StatusBadRequest, "Invalid XML: "+err.Error(), nil, "")
			return
		}
		// Replace the request body with the sanitized XML
		r.Body = io.NopCloser(bytes.NewReader(body))
	}
}
